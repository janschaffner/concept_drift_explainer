from typing import TypedDict, List, Tuple, Optional, Dict

# --- Data Structures for Individual Components ---

class DriftInfo(TypedDict):
    """
    Holds the structured information about a single detected concept drift,
    parsed by the DriftAgent.
    """
    changepoints: Tuple[str, str]
    drift_type: str
    confidence: float
    start_timestamp: str
    end_timestamp: str

class FranzoiClassification(TypedDict):
    """Represents a single classification according to the Franzoi taxonomy."""
    full_path: str  # e.g., "ORGANIZATION_INTERNAL::Process Management"
    reasoning: str  # The LLM's reasoning for this classification

class ContextSnippet(TypedDict):
    """
    Represents a single snippet of contextual information retrieved from a source document.
    """
    snippet_text: str
    source_document: str
    timestamp: int # Stored as Unix timestamp
    # MODIFIED: This now holds a list of detailed classifications
    classifications: List[FranzoiClassification]

class RankedCause(TypedDict):
    """
    Represents a single potential cause for the drift, with its evidence.
    """
    cause_description: str
    evidence_snippet: str
    source_document: str
    # ADDED: Include the classification in the final ranked cause
    context_category: str 
    confidence_score: float

class Explanation(TypedDict):
    """
    Holds the final, structured explanation generated by the ExplanationAgent.
    """
    summary: str
    ranked_causes: List[RankedCause]


# --- The Main Graph State ---

class GraphState(TypedDict):
    """
    Represents the complete, shared state of the concept drift explanation graph.
    This dictionary is passed between all agents (nodes) in the LangGraph workflow.
    Each agent reads from this state and writes its output back to it.
    """
    
    # To be populated by DriftAgent
    drift_info: DriftInfo 
    
    # To be populated by ContextRetrievalAgent
    # These are snippets retrieved based on semantic similarity.
    raw_context_snippets: List[ContextSnippet]
    
    # To be populated by ContextMapperAgent (or refined retrieval agent)
    # These are snippets that are also temporally relevant to the drift.
    filtered_context_snippets: List[ContextSnippet]

    # To be populated by ExplanationAgent
    explanation: Explanation

    # To be populated and used by the ChatbotAgent
    chat_history: List[Tuple[str, str]] # List of (human_message, ai_message)

    # To be populated by the EvaluationAgent via the UI
    user_feedback: Optional[Dict[str, any]] # e.g., {'plausibility': 5, 'comment': '...'}