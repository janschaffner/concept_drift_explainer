"""
Defines the formal data contract for the Concept Drift Explainer's agentic
workflow. This module contains the TypedDict definitions for the main GraphState
and all of its component data structures, ensuring type safety and clear data
hand-offs between agents.
"""

from typing import TypedDict, List, Tuple, Optional, Dict

# --- Data Structures for Individual Components ---
# These TypedDicts define the shape of the data objects that are created
# and passed between the different agents in the pipeline. They act as
# a formal schema for the data at each step of the process.

class DriftInfo(TypedDict):
    """
    Holds the structured information about a single detected concept drift,
    parsed by the DriftAgent.
    """
    process_name: str
    changepoints: Tuple[str, str]
    drift_type: str
    confidence: float
    # Timestamps are stored in ISO 8601 format (e.g., "2023-10-27T10:00:00")
    start_timestamp: str
    end_timestamp: str

class FranzoiClassification(TypedDict):
    """
    Represents a single classification according to the Process Mining Context 
    Taxonomy by Franzoi, Hartl et al. (2025).
    DOI: 10.1007/s44311-025-00008-6
    """
    full_path: str  # e.g., "ORGANIZATION_INTERNAL::Process Management"
    reasoning: str  # The LLM's reasoning for this classification

class ContextSnippet(TypedDict):
    """
    Represents a single snippet of contextual information retrieved from a source document.
    """
    snippet_text: str
    source_document: str
    timestamp: int # Stored as Unix timestamp
    source_type: str # "context" or "bpm-kb"
    similarity_score: float
    # These scores are calculated and added by the Re-Ranker Agent.
    semantic_specificity: Optional[float]
    priority_score: Optional[float]
    support_only: bool # True if this came from the glossary ("bpm-kb")
    # Populated by the Franzoi Mapper Agent.
    classifications: List[FranzoiClassification] # list of detailed classifications

class RankedCause(TypedDict):
    """
    Represents a single potential cause for the drift, as presented in the final explanation.
    """
    cause_description: str
    evidence_snippet: str
    source_document: str
    context_category: str # The most relevant context category for this cause.
    confidence_score: float # The final, calibrated confidence score.

class Explanation(TypedDict):
    """
    Holds the final, structured explanation generated by the ExplanationAgent.
    """
    summary: str
    ranked_causes: List[RankedCause]


# --- The Main Graph State ---

class GraphState(TypedDict):
    """
    Represents the complete, shared state of the concept drift explanation graph.
    This dictionary is passed between all agents (nodes) in the LangGraph workflow.
    Each agent reads from this state and writes its output back to it.
    """
    # --- Core Pipeline State ---

    # Populated by the UI to select which drift to analyze.
    selected_drift: Optional[Dict]

    # Populated by the DriftAgent with structured drift info.
    drift_info: Dict
    # Populated by the DriftAgent with general keywords from the trace.
    drift_keywords: Optional[List[str]]
    # Populated by the DriftAgent with a specific, unique phrase.
    drift_phrase: Optional[str]

    # Populated by the ContextRetrievalAgent with a broad list of candidates.
    raw_context_snippets: List[ContextSnippet]
    # Populated by the ReRankerAgent with a filtered, more relevant list.
    reranked_context_snippets: List[ContextSnippet]
    # Populated by the ReRankerAgent with glossary terms for reasoning.
    supporting_context: List[ContextSnippet]

    # Populated by the ExplanationAgent with the final, synthesized explanation.
    explanation: Explanation
    
    # --- Application & UI State ---

    # A log of all state transitions, for debugging and full-context chat.
    full_state_log: List[Dict]
    # The summary from the DriftLinkerAgent for multi-drift analysis.
    linked_drift_summary: Optional[str]
    connection_type: Optional[str]

    # The current question from the user for the chatbot.
    user_question: Optional[str]
    # The history of the ongoing chat conversation.
    chat_history: List[Tuple[str, str]]
    
    # The state of the feedback buttons in the UI.
    feedback_states: dict
    
    # Used for capturing and displaying errors in the UI.
    error_message: Optional[str]