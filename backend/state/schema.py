from typing import TypedDict, List, Tuple, Optional, Dict

# --- Data Structures for Individual Components ---

class DriftInfo(TypedDict):
    """
    Holds the structured information about a single detected concept drift,
    parsed by the DriftAgent.
    """
    changepoints: Tuple[str, str]
    drift_type: str
    confidence: float
    start_timestamp: str
    end_timestamp: str

class FranzoiClassification(TypedDict):
    """Represents a single classification according to the Franzoi taxonomy."""
    full_path: str  # e.g., "ORGANIZATION_INTERNAL::Process Management"
    reasoning: str  # The LLM's reasoning for this classification

class ContextSnippet(TypedDict):
    """
    Represents a single snippet of contextual information retrieved from a source document.
    """
    snippet_text: str
    source_document: str
    timestamp: int # Stored as Unix timestamp
    source_type: str # "context" or "bpm-kb"
    # MODIFIED: This now holds a list of detailed classifications
    classifications: List[FranzoiClassification]

class RankedCause(TypedDict):
    """
    Represents a single potential cause for the drift, with its evidence.
    """
    cause_description: str
    evidence_snippet: str
    source_document: str
    # ADDED: Include the classification in the final ranked cause
    context_category: str 
    confidence_score: float

class Explanation(TypedDict):
    """
    Holds the final, structured explanation generated by the ExplanationAgent.
    """
    summary: str
    ranked_causes: List[RankedCause]


# --- The Main Graph State ---

class GraphState(TypedDict):
    """
    Represents the complete, shared state of the concept drift explanation graph.
    This dictionary is passed between all agents (nodes) in the LangGraph workflow.
    Each agent reads from this state and writes its output back to it.
    """
    # Populated by the UI
    selected_drift: Optional[Dict]

    # Populated by the Drift Agent
    drift_info: Dict
    drift_keywords: Optional[List[str]]

    # This key holds the initial large list of candidates from the retrieval agent
    raw_context_snippets: List[Dict]

    # This will hold the refined list after re-ranking
    reranked_context_snippets: List[Dict]

    # Populated by the Explanation Agent
    explanation: Explanation
    
    # Used for the full analysis log and Chatbot context
    full_state_log: List[Dict]
    linked_drift_summary: Optional[str]

    # Used by the Chatbot
    user_question: Optional[str]
    chat_history: List[Tuple[str, str]]
    
    # Used by the UI for feedback
    feedback_states: dict
    
    # Used for error handling
    error_message: Optional[str]